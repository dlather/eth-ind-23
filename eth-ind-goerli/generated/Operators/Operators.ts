// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OperatorAdded extends ethereum.Event {
  get params(): OperatorAdded__Params {
    return new OperatorAdded__Params(this);
  }
}

export class OperatorAdded__Params {
  _event: OperatorAdded;

  constructor(event: OperatorAdded) {
    this._event = event;
  }

  get contestId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Operators__getOperatorFeeResultValue0Struct extends ethereum.Tuple {
  get fee(): BigInt {
    return this[0].toBigInt();
  }

  get decimals(): BigInt {
    return this[1].toBigInt();
  }
}

export class Operators__setOperatorFeeInput_feeStruct extends ethereum.Tuple {
  get fee(): BigInt {
    return this[0].toBigInt();
  }

  get decimals(): BigInt {
    return this[1].toBigInt();
  }
}

export class Operators extends ethereum.SmartContract {
  static bind(address: Address): Operators {
    return new Operators("Operators", address);
  }

  getAllContests(_operatorAddress: Address): Array<Bytes> {
    let result = super.call(
      "getAllContests",
      "getAllContests(address):(bytes32[])",
      [ethereum.Value.fromAddress(_operatorAddress)]
    );

    return result[0].toBytesArray();
  }

  try_getAllContests(
    _operatorAddress: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getAllContests",
      "getAllContests(address):(bytes32[])",
      [ethereum.Value.fromAddress(_operatorAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getOperatorFee(
    _operatorAddress: Address,
    _contestId: Bytes
  ): Operators__getOperatorFeeResultValue0Struct {
    let result = super.call(
      "getOperatorFee",
      "getOperatorFee(address,bytes32):((uint256,uint256))",
      [
        ethereum.Value.fromAddress(_operatorAddress),
        ethereum.Value.fromFixedBytes(_contestId)
      ]
    );

    return changetype<Operators__getOperatorFeeResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getOperatorFee(
    _operatorAddress: Address,
    _contestId: Bytes
  ): ethereum.CallResult<Operators__getOperatorFeeResultValue0Struct> {
    let result = super.tryCall(
      "getOperatorFee",
      "getOperatorFee(address,bytes32):((uint256,uint256))",
      [
        ethereum.Value.fromAddress(_operatorAddress),
        ethereum.Value.fromFixedBytes(_contestId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Operators__getOperatorFeeResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  setOperatorFee(
    _contestId: Bytes,
    _fee: Operators__setOperatorFeeInput_feeStruct
  ): boolean {
    let result = super.call(
      "setOperatorFee",
      "setOperatorFee(bytes32,(uint256,uint256)):(bool)",
      [
        ethereum.Value.fromFixedBytes(_contestId),
        ethereum.Value.fromTuple(_fee)
      ]
    );

    return result[0].toBoolean();
  }

  try_setOperatorFee(
    _contestId: Bytes,
    _fee: Operators__setOperatorFeeInput_feeStruct
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "setOperatorFee",
      "setOperatorFee(bytes32,(uint256,uint256)):(bool)",
      [
        ethereum.Value.fromFixedBytes(_contestId),
        ethereum.Value.fromTuple(_fee)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class SetOperatorFeeCall extends ethereum.Call {
  get inputs(): SetOperatorFeeCall__Inputs {
    return new SetOperatorFeeCall__Inputs(this);
  }

  get outputs(): SetOperatorFeeCall__Outputs {
    return new SetOperatorFeeCall__Outputs(this);
  }
}

export class SetOperatorFeeCall__Inputs {
  _call: SetOperatorFeeCall;

  constructor(call: SetOperatorFeeCall) {
    this._call = call;
  }

  get _contestId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get _fee(): SetOperatorFeeCall_feeStruct {
    return changetype<SetOperatorFeeCall_feeStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetOperatorFeeCall__Outputs {
  _call: SetOperatorFeeCall;

  constructor(call: SetOperatorFeeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetOperatorFeeCall_feeStruct extends ethereum.Tuple {
  get fee(): BigInt {
    return this[0].toBigInt();
  }

  get decimals(): BigInt {
    return this[1].toBigInt();
  }
}
